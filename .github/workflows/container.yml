name: Docker Image CI

on:
  workflow_dispatch:
  push:
    branches: 
    - main
    - "gha/**"
  pull_request:
    branches: [ main ]

permissions:
  contents: write # To commit VERSION file if updated by the script
  packages: write # To publish to GHCR.io or Docker Hub

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for all branches and tags.
        # This is necessary for `git diff` to compare changes accurately against `github.event.before`.
        fetch-depth: 0

    - name: Populate variables
      id: vars
      run: |
        echo "s3ql_version=$(cat S3QL_VERSION)" >> "$GITHUB_OUTPUT"
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.refs }}" != 'refs/heads/main' ]]; then
          echo "verbose_build=1" >> "$GITHUB_OUTPUT"
        fi

    - name: Calculate Version for Build
      id: version_calculator
      run: |
        SCRIPT_PATH=".github/scripts/calculate_version.sh"
        if [[ ! -f "$SCRIPT_PATH" ]]; then
          echo "::error::Version calculation script not found at $SCRIPT_PATH"
          exit 1
        fi
        chmod +x "$SCRIPT_PATH" # Ensure script is executable
        "$SCRIPT_PATH" # Execute the script
      env:
        EVENT_NAME: ${{ github.event_name }}
        GIT_REF: ${{ github.ref }}
        EVENT_BEFORE_SHA: ${{ github.event.before }}
        CURRENT_SHA: ${{ github.sha }}
        S3QL_VERSION_VALUE: ${{ steps.vars.outputs.s3ql_version }}
        VERSION_FILE: VERSION 
        WORKSPACE_PATH: ${{ github.workspace }}

    - name: Commit and Push VERSION file
      # Only run on direct pushes to main or manual dispatches on main branch
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
      run: |
        git config --local user.name 'github-actions[bot]'
        git config --local user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Add the VERSION file to staging.
        # If the script decided to use a manually updated version that was already 
        # part of the incoming push AND its content matches what the script determined, 
        # `git diff --staged` will show no changes.
        git add "$VERSION_FILE"

        # Check if the staged VERSION file actually has differences from HEAD.
        # This handles cases where the script rewrote the file with the same content it already had
        # (e.g. manual update matched script's expectation) or if no change was made by script.
        if git diff --staged --quiet "$VERSION_FILE"; then
          echo "INFO: '${VERSION_FILE}' content in workspace is unchanged or matches the incoming version from push. Nothing to auto-commit."
        else
          echo "INFO: '${VERSION_FILE}' was updated by the versioning script (e.g., auto-increment or month reset)."
          git commit -m "Bump version to ${{ steps.version_calculator.outputs.new_version }} [skip ci]"
          echo "INFO: Pushing updated '${VERSION_FILE}' file..."
          # Retry push in case of transient issues
          for i in 1 2 3; do git push && break || (echo "Push attempt $i failed, retrying in 5s..." && sleep 5); done
        fi
      env:
        VERSION_FILE: VERSION
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          benschumacher/s3ql
          ghcr.io/${{ github.repository_owner }}/s3ql # Uncomment if using GHCR
        tags: |
          # Use the calculated version for tags
          type=raw,value=${{ steps.version_calculator.outputs.new_version }}
          type=raw,value=${{ steps.version_calculator.outputs.new_version }}-s3ql_${{ steps.vars.outputs.s3ql_version }}

          # Latest tag for main branch pushes or manual dispatches on main
          type=raw,value=latest,enable=${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main') }}

          type=schedule
          type=ref,event=branch # e.g., main, feature-branch-name
          type=ref,event=pr    # e.g., pr-123
          type=sha,format=short,prefix=,suffix=

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          S3QL_VERSION=${{ steps.vars.outputs.s3ql_version }}
          VERBOSE=${{ steps.vars.outputs.verbose_build }}

